{"version":3,"sources":["CompleteList.js","TaskForm.js","App.js","serviceWorker.js","index.js"],"names":["CompleteList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","gotIt","i","taskComplete","console","log","_this2","react_default","a","createElement","className","items","map","item","key","onClick","bind","completed","Fragment","type","defaultChecked","text","Component","TaskForm","itemUpdate","e","setState","target","value","addToList","preventDefault","state","length","onSubmit","name","onChange","App","itemName","index","concat","toConsumableArray","complete","g","id","src_TaskForm","src_CompleteList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e0fdfe9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass CompleteList extends Component {\r\n    constructor(props){\r\n      super(props);\r\n      console.log(\"I'm not useless\")\r\n    }\r\n  \r\n    gotIt = (i) => {\r\n      this.props.taskComplete(i);\r\n    }\r\n  \r\n    render() {\r\n      return(\r\n        <table className=\"table table-striped\">\r\n            <thead>\r\n              <tr>\r\n                <th>Completed?</th>\r\n                <th>Item</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {\r\n                this.props.items.map( (item, i) =>\r\n                <tr key={i}>\r\n                  <td onClick={this.gotIt.bind(this, i)}>\r\n                  {\r\n                    item.completed ?\r\n                    <>\r\n                    <input type=\"checkbox\" defaultChecked /> &nbsp;\r\n                    <span className=\"badge badge-success\">Finished!</span> \r\n                    </>:\r\n                    <>\r\n                    <input type=\"checkbox\" /> &nbsp;\r\n                    <span className=\"badge badge-danger\">Completed???</span>\r\n                    </>\r\n                  }\r\n                  </td>\r\n                  <td>{item.text}</td>\r\n                </tr>\r\n                )\r\n              }\r\n            </tbody>\r\n          </table>\r\n      )\r\n    }\r\n  \r\n  }\r\n\r\nexport default CompleteList;","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass TaskForm extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        item: \"\",\r\n      }\r\n    }\r\n    \r\n    itemUpdate = (e) => {\r\n      this.setState({item: e.target.value});\r\n    }\r\n  \r\n    addToList = (e) => {\r\n      e.preventDefault();\r\n      if(this.state.item.length < 1) \r\n        return\r\n      this.props.addToList(this.state.item);\r\n      this.setState({item: \"\"});\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <form onSubmit={this.addToList}>\r\n        <div className=\"form-group\">\r\n          <label>To Do List:\r\n          <input \r\n            className=\"form-control\" \r\n            type=\"text\" \r\n            name=\"item\"\r\n            value={this.state.item}\r\n            onChange={this.itemUpdate}\r\n            />\r\n          </label>\r\n        </div>\r\n        <input type=\"submit\" className=\"btn btn-primary\" />\r\n      </form>\r\n      );\r\n    }\r\n  \r\n  }\r\n\r\nexport default TaskForm;","import React, { Component } from 'react';\nimport './App.css';\nimport CompleteList from './CompleteList';\nimport TaskForm from './TaskForm';\n\n\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [\n        { id: 1, text: \"Learn React\", completed: false },\n        { id: 2, text: \"Build a todo app\", completed: true },\n        { id: 3, text: \"Profit\", completed: false }\n      ]\n    }\n  }\n\n  addToList = (itemName) => {\n    let index = {text: itemName, completed: false};\n    this.setState({\n        items: [...this.state.items, index],\n        item: \"\"\n    });\n  }\n\n  complete = (i) => {\n    // alert(\"this is coming from App component\", i);\n    let g = [...this.state.items];\n    g[i].completed = !g[i].completed;\n    this.setState({completed: g});\n  }\n\n  render(){\n    return (\n      <div className=\"Dragon\">\n        <div className=\"jumbotron\">\n        <h1>Dojo To Do List</h1>\n        </div>\n        <br /><hr /><br />\n        <TaskForm \n          addToList={this.addToList}\n        />\n        <br /><hr /><br />\n        <CompleteList \n          items={this.state.items} \n          taskComplete={this.complete}\n          />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}