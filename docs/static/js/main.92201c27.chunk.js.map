{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addToList","e","preventDefault","state","item","length","setState","items","concat","toConsumableArray","console","log","itemUpdate","target","value","gotIt","i","completed","id","text","_this2","react_default","a","createElement","className","onSubmit","type","name","onChange","map","key","onClick","bind","Fragment","defaultChecked","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.92201c27.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      item: \"\",\n      items: [\n        { id: 1, text: \"Learn React\", completed: false },\n        { id: 2, text: \"Build a todo app\", completed: false },\n        { id: 3, text: \"Profit\", completed: false }\n      ]\n    }\n  }\n\n  addToList = (e) => {\n    e.preventDefault();\n    if(this.state.item.length < 1) \n      return\n    this.setState({\n        items: [...this.state.items, this.state.item],\n        item: \"\"\n    }, () => {\n      console.log(this.state.items);\n    })   \n  }\n\n  itemUpdate = (e) => {\n    this.setState({item: e.target.value});\n  }\n\n  gotIt = (i) => {\n    console.log(i);\n    let items = [...this.state.items];\n    items[i].completed = !items[i].completed;\n    this.setState([items, i]);\n  }\n\n  render(){\n    return (\n      <div className=\"Dragon\">\n        <div className=\"jumbotron\">\n        <h1>Dojo To Do List</h1>\n        </div>\n        <br /><hr /><br />\n        <form onSubmit={this.addToList}>\n          <div className=\"form-group\">\n            <label>To Do List:\n            <input \n              className=\"form-control\" \n              type=\"text\" \n              name=\"item\"\n              value={this.state.item}\n              onChange={this.itemUpdate}\n              />\n            </label>\n          </div>\n          <input type=\"submit\" className=\"btn btn-primary\" />\n        </form>\n        <br /><hr /><br />\n        <table className=\"table table-striped\">\n          <thead>\n            <tr>\n              <th>Completed?</th>\n              <th>Item</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              this.state.items.map( (item, i) =>\n              <tr key={i}>\n                <td onClick={this.gotIt.bind(this, i)}>\n                {\n                  item.completed ?\n                  <>\n                  <input type=\"checkbox\" defaultChecked /> &nbsp;\n                  <span className=\"badge badge-success\">Finished!</span> \n                  </>:\n                  <>\n                  <input type=\"checkbox\" /> &nbsp;\n                  <span className=\"badge badge-danger\">Completed???</span>\n                  </>\n                }\n                </td>\n                <td>{item.text}</td>\n              </tr>\n              )\n            }\n          </tbody>\n\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}